# CI 项目
name: ZeroWrtCore

# CI 计划
on:
  workflow_call:
    inputs:
      WRT_ONLY_CONFIG:
        required: true
        type: boolean
      WRT_PACKAGE:
        required: false
        type: string
      WRT_CONFIG:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_HOST:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string

# CI 环境
env:
  # GITHUB ENV
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  # WRT ENV
  WRT_ONLY_CONFIG: ${{inputs.WRT_ONLY_CONFIG}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_HOST: ${{inputs.WRT_HOST}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}

# CI 任务
jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell /usr/local/julia /usr/local/aws-cli /usr/local/aws-sam-cli /usr/share/gradle"
          testing: false

      - name: Checkout Project
        uses: actions/checkout@main

      - name: Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev tar
          sudo bash "$GITHUB_WORKSPACE/Script/InitEnvironment.sh"
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialize Environment
        run: |
          # Environment
          echo "WRT_NAME=ZeroWrt" >>$GITHUB_ENV
          echo "WRT_DIR=$WRT_NAME" >>$GITHUB_ENV
          echo "WRT_MARK=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >>$GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >>$GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG | tr '[:lower:]' '[:upper:]')" >>$GITHUB_ENV
          echo "WRT_KVER=none" >>$GITHUB_ENV
          echo "WRT_LIST=none" >>$GITHUB_ENV
          echo "WRT_ConfigPath=$GITHUB_WORKSPACE/$WRT_DIR/.config" >>$GITHUB_ENV
          # Hook
          source "$ZD_ScriptLibPath/Hook.sh"
          sourceHook 'ZeroWrtCore/InitEnvironment'

      - name: Initialize ZeroDream
        run: |
          chmod +x "$GITHUB_WORKSPACE/Library/Script/InitProject.sh"
          source "$GITHUB_WORKSPACE/Library/Script/InitProject.sh"

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO "$GITHUB_WORKSPACE/$WRT_DIR/"
          cd "$GITHUB_WORKSPACE/$WRT_DIR/" && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >>$GITHUB_ENV
          # GitHub Action 移除国内下载源
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: Copy File
        run: |
          cp -r "$GITHUB_WORKSPACE"/Openwrt/* "$GITHUB_WORKSPACE/$WRT_DIR/"
          cp -r "$GITHUB_WORKSPACE"/Openwrt/.* "$GITHUB_WORKSPACE/$WRT_DIR/"

      - name: Check Script
        run: |
          find "$GITHUB_WORKSPACE/" -maxdepth 3 -type f -iregex ".*\.\(sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Cache
        id: check-cache
        if: env.WRT_ONLY_CONFIG == 'false'
        uses: actions/cache@main
        with:
          key: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_HASH}}
          restore-keys: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}
          path: |
            ${{github.workspace}}/${{env.WRT_DIR}}/.ccache
            ${{github.workspace}}/${{env.WRT_DIR}}/staging_dir/host*
            ${{github.workspace}}/${{env.WRT_DIR}}/staging_dir/tool*

      - name: Update Cache
        if: env.WRT_ONLY_CONFIG == 'false'
        run: |
          if [ -d "$GITHUB_WORKSPACE/$WRT_DIR/staging_dir" ]; then
            find "$GITHUB_WORKSPACE/$WRT_DIR/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done
            mkdir -p $GITHUB_WORKSPACE/$WRT_DIR/tmp && echo "1" > $GITHUB_WORKSPACE/$WRT_DIR/tmp/.build
            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi
          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "$WRT_CONFIG-$WRT_INFO" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done
            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          "$GITHUB_WORKSPACE/$WRT_DIR/scripts/feeds" update -a
          "$GITHUB_WORKSPACE/$WRT_DIR/scripts/feeds" install -a

      - name: Custom Package
        run: |
          bash "$GITHUB_WORKSPACE/Script/FirmwarePackage.sh"
          bash "$GITHUB_WORKSPACE/Script/FirmwareHandle.sh"

      - name: Custom Setting
        run: |
          source "$GITHUB_WORKSPACE/Script/FirmwareConfig.sh"
          createConfig && cat "$WRT_ConfigPath"
          bash "$GITHUB_WORKSPACE/Script/FirmwareSettings.sh"
          cd "$GITHUB_WORKSPACE/$WRT_DIR/"
          make defconfig -j$(nproc) && make clean -j$(nproc)

      - name: Download Package
        if: env.WRT_ONLY_CONFIG == 'false'
        run: |
          cd "$GITHUB_WORKSPACE/$WRT_DIR/"
          make download -j$(nproc)

      - name: Compile ZeroWrt
        if: env.WRT_ONLY_CONFIG == 'false'
        run: |
          cd "$GITHUB_WORKSPACE/$WRT_DIR/"
          make -j$(nproc) || make -j1 V=s

      - name: Machine Information
        run: |
          cd "$GITHUB_WORKSPACE/$WRT_DIR/"
          echo "===================="
          lscpu | grep -E "name|Core|Thread"
          echo "===================="
          df -h
          echo "===================="
          du -h --max-depth=1
          echo "===================="

      - name: Set ZeroWrt Environment
        if: env.WRT_ONLY_CONFIG == 'false'
        run: |
          echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >>$GITHUB_ENV
          echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >>$GITHUB_ENV

      - name: HandleWithSecret
        run: |
          # Hook
          source "$ZD_ScriptLibPath/Hook.sh"
          bashHook 'ZeroWrtCore/HandleWithSecret'
        env:
          ZeroDream_Secret: ${{secrets.ZERODREAM_SECRET}}

      - name: Collect Artifact
        run: |
          # Hook
          source "$ZD_ScriptLibPath/Hook.sh"
          bashHook 'ZeroWrtCore/HandleArtifactUpload'
          # CollectArtifact
          cd "$GITHUB_WORKSPACE/$WRT_DIR/"
          if [[ "$WRT_ONLY_CONFIG" == 'true' ]]; then
            cp -f "$WRT_ConfigPath" "$ZD_ArtifactUploadPath/$WRT_NAME-Config-$WRT_CONFIG-$ZD_DATE.txt"
          fi

      - name: Collect Release
        run: |
          # Hook
          source "$ZD_ScriptLibPath/Hook.sh"
          bashHook 'ZeroWrtCore/HandleReleaseUpload'
          sourceHook 'ZeroWrtCore/SetReleaseInfo'

      - name: Make Clean
        if: env.WRT_ONLY_CONFIG == 'false'
        run: |
          cd "$GITHUB_WORKSPACE/$WRT_DIR/"
          make clean -j$(nproc)

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{env.WRT_NAME}}-Artifact-${{env.WRT_CONFIG}}-${{env.ZD_DATE}}
          path: ${{env.ZD_ArtifactUploadPath}}/*.*
          retention-days: 1 # 保留附件天数，最大值为 90 天

      - name: Upload Release
        if: env.WRT_ONLY_CONFIG == 'false'
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_NAME}}-Firmware-${{env.WRT_CONFIG}}-${{env.ZD_DATE}}
          files: ${{env.ZD_ReleaseUploadPath}}/*.*
          body: ${{env.WRT_UploadReleaseBody}}
